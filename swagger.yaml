swagger: "2.0"
info:
  version: "1.0.0"
  title: FoodList API
host: localhost:8081
basePath: /api
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /foods:
    get:
      tags:
        - foods
      description: Returns Food List to the user
      operationId: food
      parameters:
        - name: page
          in: query
          description: The number of current page
          required: false
          type: string
        - name: limit
          in: query
          description: The limit number of ocurrences that must be showed per page
          required: false
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/foodList"
    post:
      tags:
        - foods
      description: Submit an new Food to the list
      operationId: food
      parameters:
        - in: body
          name: postFoodPayload
          description: Payload format to submit an new food
          schema:
            type: object
            required:
              - refillable
              - drinkable
              - name
              - price
            properties:
              refillable:
                type: boolean
              drinkable:
                type: boolean
              name:
                type: string
              price:
                type: number
              size:
                type: string
              spicy:
                type: string
              ingredients:
                type: array
                items:
                  $ref: "#/definitions/ingredientsDefinition"
            example:
              name: "Burrito"
              refillable: true
              drinkable: false
              price: 2.17
              size: "P"
              spicy: "Hot"
              ingredients:
                - name: "Lettuce"
                  isExpired: false
                - name: "Onions"
                  isExpired: false
                - name: "Meat"
                  isExpired: false
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/CreateSuccess"
        "400":
          description: BadRequest
          schema:
            $ref: "#/definitions/BadRequest"
  /foods/{foodId}:
    get:
      tags:
        - foodById
      description: Returns exclusive food by id
      operationId: food
      parameters:
        - name: foodId
          in: path
          required: true
          type: string
          description: ID of the current Food
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/foodItem"
        "404":
          description: Resouce not found
          schema:
            $ref: "#/definitions/NotFound"
    put:
      tags:
        - foodById
      description: Edit informations from an specific Food
      operationId: food
      parameters:
        - name: foodId
          in: path
          required: true
          type: string
          description: ID of the current Food
        - in: body
          name: putFoodPayload
          description: Payload format to edit the current Food
          schema:
            type: object
            properties:
              refillable:
                type: boolean
              drinkable:
                type: boolean
              name:
                type: string
              price:
                type: number
              size:
                type: string
              spicy:
                type: string
              ingredients:
                type: array
                items:
                  $ref: "#/definitions/ingredientsDefinition"
            example:
              name: "Burrito"
              refillable: true
              drinkable: false
              price: 2.17
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/UpdateSuccess"
        "404":
          description: Resouce not found
          schema:
            $ref: "#/definitions/NotFound"
        "400":
          description: BadRequest
          schema:
            $ref: "#/definitions/BadRequest"
    patch:
      tags:
        - foodById
      description: Edit only one atribute from an specific Food
      operationId: food
      parameters:
        - name: foodId
          in: path
          required: true
          type: string
          description: ID of the current Food
        - in: body
          name: patchFoodPayload
          description: Payload format to edit the current Food
          schema:
            type: object
            properties:
              refillable:
                type: boolean
              drinkable:
                type: boolean
              name:
                type: string
              price:
                type: number
              size:
                type: string
              spicy:
                type: string
              ingredients:
                type: array
                items:
                  $ref: "#/definitions/ingredientsDefinition"
            example:
              name: "Burrito Patched"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/UpdateSuccess"
        "404":
          description: Resouce not found
          schema:
            $ref: "#/definitions/NotFound"
        "400":
          description: BadRequest
          schema:
            $ref: "#/definitions/BadRequest"
    delete:
      tags:
        - foodById
      description: Remove the specific food from Food List
      operationId: food
      parameters:
        - name: foodId
          in: path
          required: true
          type: string
          description: ID of the current Food
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/DeleteSuccess"
        "404":
          description: Resouce not found
          schema:
            $ref: "#/definitions/NotFound"
  /combos:
    get:
      tags:
        - combos
      description: Returns Combo List to the user
      operationId: combo
      parameters:
        - name: page
          in: query
          description: The number of current page
          required: false
          type: string
        - name: limit
          in: query
          description: The limit number of ocurrences that must be showed per page
          required: false
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/comboList"
    post:
      tags:
        - combos
      description: Submit an new Combo to the list
      operationId: combo
      parameters:
        - in: body
          name: postComboPayload
          description: Payload format to submit an new Combo
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
              foods:
                type: array
                items:
                  $ref: "#/definitions/partialFoodDefinition"
            example:
              name: "Burrito"
              foods:
                - name: "Burrito"
                  size: "M"
                  price: 5.13
                  refillable: false
                - name: "Taco"
                  size: "M"
                  price: 12.50
                  refillable: false
                - name: "Drink"
                  size: "M"
                  price: 5.13
                  refillable: false
                  image: "http://lorempixel.com/640/480/food"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/CreateSuccess"
        "400":
          description: BadRequest
          schema:
            $ref: "#/definitions/BadRequest"
  /combos/{comboId}:
    get:
      tags:
        - comboById
      description: Returns exclusive combo by id
      operationId: combo
      parameters:
        - name: comboId
          in: path
          required: true
          type: string
          description: ID of the current Combo
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/comboItem"
        "404":
          description: Resouce not found
          schema:
            $ref: "#/definitions/NotFound"
    put:
      tags:
        - comboById
      description: Edit informations from an specific Combo
      operationId: combo
      parameters:
        - name: comboId
          in: path
          required: true
          type: string
          description: ID of the current Combo
        - in: body
          name: putComboPayload
          description: Payload format to edit the current Combo
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
              foods:
                type: array
                items:
                  $ref: "#/definitions/partialFoodDefinition"
            example:
              name: "Burrito"
              foods:
                - name: "Burrito Put"
                  size: "M"
                  price: 6.13
                  refillable: false
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/UpdateSuccess"
        "404":
          description: Resouce not found
          schema:
            $ref: "#/definitions/NotFound"
        "400":
          description: BadRequest
          schema:
            $ref: "#/definitions/BadRequest"
    patch:
      tags:
        - comboById
      description: Edit only one atribute from an specific Combo
      operationId: combo
      parameters:
        - name: comboId
          in: path
          required: true
          type: string
          description: ID of the current Combo
        - in: body
          name: patchComboPayload
          description: Payload format to edit the current Combo
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
              foods:
                type: array
                items:
                  $ref: "#/definitions/partialFoodDefinition"
            example:
              name: "Burrito Patched"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/UpdateSuccess"
        "404":
          description: Resouce not found
          schema:
            $ref: "#/definitions/NotFound"
        "400":
          description: BadRequest
          schema:
            $ref: "#/definitions/BadRequest"
    delete:
      tags:
        - comboById
      description: Remove the specific combo from Combo List
      operationId: combo
      parameters:
        - name: comboId
          in: path
          required: true
          type: string
          description: ID of the current Combo
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/DeleteSuccess"
        "404":
          description: Resouce not found
          schema:
            $ref: "#/definitions/NotFound"
  /swagger:
    x-swagger-pipe: swagger_raw
definitions:
  ingredientsDefinition:
    required:
      - name
      - isExpired
    properties:
      name:
        type: string
      isExpired:
        type: boolean
  partialFoodDefinition:
    required:
      - name
      - price
      - size
    properties:
      name:
        type: string
      price:
        type: number
      size:
        type: string
      refillable:
        type: boolean
      image:
        type: string
  foodItem:
    required:
      - name
      - price
      - size
      - drinkable
      - refillable
    properties:
      name:
        type: string
      price:
        type: number
      size:
        type: string
      drinkable:
        type: boolean
      refillable:
        type: boolean
      spicy:
        type: string
      image:
        type: string
      ingredients:
        type: array
        items:
          $ref: "#/definitions/ingredientsDefinition"
    example:
      name: "Food Example"
      price: 15.15
      size: "P"
      drinkable: false
      refillable: true
      spicy: "Hot"
      image: "http://lorempixel.com/640/480/food"
      ingredients:
        - name: "Lettuce"
          isExpired: false
        - name: "Carrot"
          isExpired: false
        - name: "Rice"
          isExpired: false
  comboItem:
    required:
      - name
    properties:
      name:
        type: string
      foods:
        type: array
        items:
          $ref: "#/definitions/partialFoodDefinition"
    example:
      name: "Combo Example"
      foods:
        - name: "Food One"
          price: 5.10
          size: "P"
          refillable: false
        - name: "Food Two"
          price: 5.20
          size: "Default"
          refillable: false
        - name: "Food Three"
          price: 5.30
          size: "M"
          refillable: false
      totalPrice: 15.60
  foodList:
    properties:
      items:
        $ref: "#/definitions/foodItem"
    example:
      - _id: 3a4a8309c5856aefd077a81d
        name: Food Example A
        size: P
        spicy: Hot
        price: 3.15
        image: "http://lorempixel.com/640/480/food"
        __v: 0
        ingredients:
          - name: Ingredient A
            isExpired: false
            _id: 3a4a8309c5856aefd077a81a
          - name: Ingredient B
            isExpired: false
            _id: 3a4a8309c5856aefd077a81b
          - name: Ingredient C
            isExpired: false
            _id: 3a4a8309c5856aefd077a81c
        refillable: false
        drinkable: true
      - _id: 2a4a8309c5856aefd077a81d
        name: Food Example B
        size: P
        spicy: Hot
        price: 7.15
        image: "http://lorempixel.com/640/480/food"
        __v: 0
        ingredients:
          - name: Ingredient D
            isExpired: false
            _id: 2a4a8309c5856aefd077a81a
          - name: Ingredient E
            isExpired: false
            _id: 2a4a8309c5856aefd077a81b
          - name: Ingredient F
            isExpired: false
            _id: 2a4a8309c5856aefd077a81c
        refillable: false
        drinkable: true
  comboList:
    properties:
      items:
        $ref: "#/definitions/comboItem"
    example:
      - _id: "5a4a7ddec5e723ce35db1e03"
        name: Combo Example A
        __v: 0
        foods:
          - name: Food X
            price: 5.1
            size: G
            image: "http://lorempixel.com/640/480/food"
            _id: 5a4a7ddec5e723ce35db1e06
            refillable: true
          - name: Food Y
            price: 5.3
            size: P
            image: "http://lorempixel.com/640/480/food"
            _id: 5a4a7ddec5e723ce35db1e04
            refillable: true
          - name: Food Z
            price: 5.2
            size: Default
            image: "http://lorempixel.com/640/480/food"
            _id: 5a4a7ddec5e723ce35db1e03
            refillable: true
        totalPrice: 15.6
      - _id: 4a4a7ddec5e723ce35db1e03
        name: Combo Example B
        __v: 0
        foods:
          - name: Food A
            price: 5
            size: G
            image: "http://lorempixel.com/640/480/food"
            _id: 4a4a7ddec5e723ce35db1e06
            refillable: true
          - name: Food B
            price: 5
            size: P
            image: "http://lorempixel.com/640/480/food"
            _id: 4a4a7ddec5e723ce35db1e04
            refillable: true
          - name: Food C
            price: 10.6
            size: Default
            image: "http://lorempixel.com/640/480/food"
            _id: 4a4a7ddec5e723ce35db1e03
            refillable: true
        totalPrice: 20.6
  BadRequest:
    required:
      - results
    properties:
      results:
        type: object
        required:
          - status
          - message
        properties:
          status:
            type: string
          message:
            type: string
        example:
          status: 400
          message: Some explanation about what you did wrong :)
  NotFound:
    required:
      - results
    properties:
      results:
        type: object
        required:
          - status
          - message
        properties:
          status:
            type: string
          message:
            type: string
        example:
          status: 404
          message: Resource not found
  UpdateSuccess:
    properties:
      results:
        type: object
        required:
          - status
          - message
        properties:
          status:
            type: string
          message:
            type: string
        example:
          status: 200
          message: The current Record has been updated with success
  CreateSuccess:
    properties:
      results:
        type: object
        required:
          - status
          - message
        properties:
          status:
            type: string
          message:
            type: string
        example:
          status: 201
          message: The current Record has been created with success
  DeleteSuccess:
    properties:
      results:
        type: object
        required:
          - status
          - message
        properties:
          status:
            type: string
          message:
            type: string
        example:
          status: 200
          message: The current Record has been deleted with success
